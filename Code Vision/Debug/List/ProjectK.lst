
AVRASM ver. 2.1.30  D:\STUDYING\Embedded Systems\Debug\List\ProjectK.asm Fri Dec 22 17:57:59 2023

D:\STUDYING\Embedded Systems\Debug\List\ProjectK.asm(1417): warning: Register r5 already defined by the .DEF directive
D:\STUDYING\Embedded Systems\Debug\List\ProjectK.asm(1418): warning: Register r4 already defined by the .DEF directive
D:\STUDYING\Embedded Systems\Debug\List\ProjectK.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6325
D:\STUDYING\Embedded Systems\Debug\List\ProjectK.asm(1457): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x63,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G100
000038 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 0067 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;void main(void)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0007 unsigned int counter=0; //to clear the lcd when the 2 lines is full (reading 32 numbers)
                 ; 0000 0008 char number;
                 ; 0000 0009 DDRC=0b00000111;  //1 unused pin, 4 rows (input), 3 columns (output)
                 ;	counter -> R16,R17
                 ;	number -> R19
                +
000067 e000     +LDI R16 , LOW ( 0 )
000068 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000069 e0e7      	LDI  R30,LOW(7)
00006a bbe4      	OUT  0x14,R30
                 ; 0000 000A PORTC=0b11111000; // enable pull up resistance for input pins
00006b efe8      	LDI  R30,LOW(248)
00006c bbe5      	OUT  0x15,R30
                 ; 0000 000B lcd_init(16);
00006d e1a0      	LDI  R26,LOW(16)
00006e d0c8      	RCALL _lcd_init
                 ; 0000 000C 
                 ; 0000 000D while(1)
                 _0x3:
                 ; 0000 000E {
                 ; 0000 000F number=keypad();
00006f d019      	RCALL _keypad
000070 2f3e      	MOV  R19,R30
                 ; 0000 0010 if (counter == 32) {
000071 e2e0      	LDI  R30,LOW(32)
000072 e0f0      	LDI  R31,HIGH(32)
000073 17e0      	CP   R30,R16
000074 07f1      	CPC  R31,R17
000075 f419      	BRNE _0x6
                 ; 0000 0011 lcd_clear(); // if the lcd display is full
000076 d0a3      	RCALL _lcd_clear
                 ; 0000 0012 counter = 0;
                +
000077 e000     +LDI R16 , LOW ( 0 )
000078 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0013 }
                 ; 0000 0014 
                 ; 0000 0015 counter++;
                 _0x6:
                +
000079 5f0f     +SUBI R16 , LOW ( - 1 )
00007a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0016 lcd_printf("%c", number);
                +
00007b e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00007c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00007d 93fa      	ST   -Y,R31
00007e 93ea      	ST   -Y,R30
00007f 2fe3      	MOV  R30,R19
000080 27ff      	CLR  R31
000081 2766      	CLR  R22
000082 2777      	CLR  R23
000083 d293      	RCALL __PUTPARD1
000084 e084      	LDI  R24,4
000085 d213      	RCALL _lcd_printf
000086 9626      	ADIW R28,6
                 ; 0000 0017 
                 ; 0000 0018 }
000087 cfe7      	RJMP _0x3
                 ; 0000 0019 }
                 _0x7:
000088 cfff      	RJMP _0x7
                 ; .FEND
                 ;char keypad()
                 ; 0000 001B {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 001C while (1)
                 _0x8:
                 ; 0000 001D {
                 ; 0000 001E PORTC.0 = 0; PORTC.1 = 1; PORTC.2 = 1;
000089 98a8      	CBI  0x15,0
00008a 9aa9      	SBI  0x15,1
00008b 9aaa      	SBI  0x15,2
                 ; 0000 001F //Only C1 is activated    (first column)
                 ; 0000 0020 switch (PINC)
00008c b3e3      	IN   R30,0x13
                 ; 0000 0021 {
                 ; 0000 0022 case 0b11110110:       // first row is activated (be set with 0)  (col:1 , row 1)
00008d 3fe6      	CPI  R30,LOW(0xF6)
00008e f429      	BRNE _0x14
                 ; 0000 0023 while (PINC.3 == 0);
                 _0x15:
00008f 9b9b      	SBIS 0x13,3
000090 cffe      	RJMP _0x15
                 ; 0000 0024 return '1';
000091 e3e1      	LDI  R30,LOW(49)
000092 9508      	RET
                 ; 0000 0025 break;
000093 c00d      	RJMP _0x13
                 ; 0000 0026 
                 ; 0000 0027 case 0b11101110:       // second row is activated (be set with 0)  (col:1 , row 2)
                 _0x14:
000094 3eee      	CPI  R30,LOW(0xEE)
000095 f429      	BRNE _0x18
                 ; 0000 0028 while (PINC.4 == 0);
                 _0x19:
000096 9b9c      	SBIS 0x13,4
000097 cffe      	RJMP _0x19
                 ; 0000 0029 return '4';
000098 e3e4      	LDI  R30,LOW(52)
000099 9508      	RET
                 ; 0000 002A break;
00009a c006      	RJMP _0x13
                 ; 0000 002B 
                 ; 0000 002C case 0b11011110:       // third row is activated (be set with 0)   (col:1 , row 3)
                 _0x18:
00009b 3dee      	CPI  R30,LOW(0xDE)
00009c f421      	BRNE _0x13
                 ; 0000 002D while (PINC.5 == 0);
                 _0x1D:
00009d 9b9d      	SBIS 0x13,5
00009e cffe      	RJMP _0x1D
                 ; 0000 002E return '7';
00009f e3e7      	LDI  R30,LOW(55)
0000a0 9508      	RET
                 ; 0000 002F break;
                 ; 0000 0030 
                 ; 0000 0031 
                 ; 0000 0032 }
                 _0x13:
                 ; 0000 0033 
                 ; 0000 0034 
                 ; 0000 0035 PORTC.0 = 1; PORTC.1 = 0; PORTC.2 = 1;
0000a1 9aa8      	SBI  0x15,0
0000a2 98a9      	CBI  0x15,1
0000a3 9aaa      	SBI  0x15,2
                 ; 0000 0036 //Only C2 is activated       (second column)
                 ; 0000 0037 switch (PINC)
0000a4 b3e3      	IN   R30,0x13
                 ; 0000 0038 {
                 ; 0000 0039 case 0b11110101:           // first row is activated (be set with 0)  (col:2 , row 1)
0000a5 3fe5      	CPI  R30,LOW(0xF5)
0000a6 f429      	BRNE _0x29
                 ; 0000 003A while (PINC.3 == 0);
                 _0x2A:
0000a7 9b9b      	SBIS 0x13,3
0000a8 cffe      	RJMP _0x2A
                 ; 0000 003B return '2';
0000a9 e3e2      	LDI  R30,LOW(50)
0000aa 9508      	RET
                 ; 0000 003C break;
0000ab c014      	RJMP _0x28
                 ; 0000 003D 
                 ; 0000 003E case 0b11101101:           // second row is activated (be set with 0)  (col: , row 2)
                 _0x29:
0000ac 3eed      	CPI  R30,LOW(0xED)
0000ad f429      	BRNE _0x2D
                 ; 0000 003F while (PINC.4 == 0);
                 _0x2E:
0000ae 9b9c      	SBIS 0x13,4
0000af cffe      	RJMP _0x2E
                 ; 0000 0040 return '5';
0000b0 e3e5      	LDI  R30,LOW(53)
0000b1 9508      	RET
                 ; 0000 0041 break;
0000b2 c00d      	RJMP _0x28
                 ; 0000 0042 
                 ; 0000 0043 case 0b11011101:           // third row is activated (be set with 0)  (col:1 , row 3)
                 _0x2D:
0000b3 3ded      	CPI  R30,LOW(0xDD)
0000b4 f429      	BRNE _0x31
                 ; 0000 0044 while (PINC.5 == 0);
                 _0x32:
0000b5 9b9d      	SBIS 0x13,5
0000b6 cffe      	RJMP _0x32
                 ; 0000 0045 return '8';
0000b7 e3e8      	LDI  R30,LOW(56)
0000b8 9508      	RET
                 ; 0000 0046 break;
0000b9 c006      	RJMP _0x28
                 ; 0000 0047 
                 ; 0000 0048 case 0b10111101:           // fourth row is activated (be set with 0)  (col:1 , row 4)
                 _0x31:
0000ba 3bed      	CPI  R30,LOW(0xBD)
0000bb f421      	BRNE _0x28
                 ; 0000 0049 while (PINC.6 == 0);
                 _0x36:
0000bc 9b9e      	SBIS 0x13,6
0000bd cffe      	RJMP _0x36
                 ; 0000 004A return '0';
0000be e3e0      	LDI  R30,LOW(48)
0000bf 9508      	RET
                 ; 0000 004B break;
                 ; 0000 004C 
                 ; 0000 004D }
                 _0x28:
                 ; 0000 004E 
                 ; 0000 004F 
                 ; 0000 0050 PORTC.0 = 1; PORTC.1 = 1; PORTC.2 = 0;
0000c0 9aa8      	SBI  0x15,0
0000c1 9aa9      	SBI  0x15,1
0000c2 98aa      	CBI  0x15,2
                 ; 0000 0051 //Only C3 is activated       (third column)
                 ; 0000 0052 switch (PINC)
0000c3 b3e3      	IN   R30,0x13
                 ; 0000 0053 {
                 ; 0000 0054 case 0b11110011:           // first row is activated (be set with 0)  (col:1 , row 1)
0000c4 3fe3      	CPI  R30,LOW(0xF3)
0000c5 f429      	BRNE _0x42
                 ; 0000 0055 while (PINC.3 == 0);
                 _0x43:
0000c6 9b9b      	SBIS 0x13,3
0000c7 cffe      	RJMP _0x43
                 ; 0000 0056 return '3';
0000c8 e3e3      	LDI  R30,LOW(51)
0000c9 9508      	RET
                 ; 0000 0057 break;
0000ca c00d      	RJMP _0x41
                 ; 0000 0058 
                 ; 0000 0059 case 0b11101011:           // second row is activated (be set with 0)  (col:1 , row 2)
                 _0x42:
0000cb 3eeb      	CPI  R30,LOW(0xEB)
0000cc f429      	BRNE _0x46
                 ; 0000 005A while (PINC.4 == 0);
                 _0x47:
0000cd 9b9c      	SBIS 0x13,4
0000ce cffe      	RJMP _0x47
                 ; 0000 005B return '6';
0000cf e3e6      	LDI  R30,LOW(54)
0000d0 9508      	RET
                 ; 0000 005C break;
0000d1 c006      	RJMP _0x41
                 ; 0000 005D 
                 ; 0000 005E case 0b11011011:           // third row is activated (be set with 0)  (col:1 , row 3)
                 _0x46:
0000d2 3deb      	CPI  R30,LOW(0xDB)
0000d3 f421      	BRNE _0x41
                 ; 0000 005F while (PINC.5 == 0);
                 _0x4B:
0000d4 9b9d      	SBIS 0x13,5
0000d5 cffe      	RJMP _0x4B
                 ; 0000 0060 return '9';
0000d6 e3e9      	LDI  R30,LOW(57)
0000d7 9508      	RET
                 ; 0000 0061 break;
                 ; 0000 0062 
                 ; 0000 0063 }
                 _0x41:
                 ; 0000 0064 
                 ; 0000 0065 }
0000d8 cfb0      	RJMP _0x8
                 ; 0000 0066 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000d9 931a      	ST   -Y,R17
0000da 2f1a      	MOV  R17,R26
0000db ff14      	SBRS R17,4
0000dc c002      	RJMP _0x2000004
0000dd 9adb      	SBI  0x1B,3
0000de c001      	RJMP _0x2000005
                 _0x2000004:
0000df 98db      	CBI  0x1B,3
                 _0x2000005:
0000e0 ff15      	SBRS R17,5
0000e1 c002      	RJMP _0x2000006
0000e2 9adc      	SBI  0x1B,4
0000e3 c001      	RJMP _0x2000007
                 _0x2000006:
0000e4 98dc      	CBI  0x1B,4
                 _0x2000007:
0000e5 ff16      	SBRS R17,6
0000e6 c002      	RJMP _0x2000008
0000e7 9add      	SBI  0x1B,5
0000e8 c001      	RJMP _0x2000009
                 _0x2000008:
0000e9 98dd      	CBI  0x1B,5
                 _0x2000009:
0000ea ff17      	SBRS R17,7
0000eb c002      	RJMP _0x200000A
0000ec 9ade      	SBI  0x1B,6
0000ed c001      	RJMP _0x200000B
                 _0x200000A:
0000ee 98de      	CBI  0x1B,6
                 _0x200000B:
                +
0000ef e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f0 958a     +DEC R24
0000f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f2 9ada      	SBI  0x1B,2
                +
0000f3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f4 958a     +DEC R24
0000f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f6 98da      	CBI  0x1B,2
                +
0000f7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fa c066      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fb 93aa      	ST   -Y,R26
0000fc 81a8      	LD   R26,Y
0000fd dfdb      	RCALL __lcd_write_nibble_G100
0000fe 81e8          ld    r30,y
0000ff 95e2          swap  r30
000100 83e8          st    y,r30
000101 81a8      	LD   R26,Y
000102 dfd6      	RCALL __lcd_write_nibble_G100
                +
000103 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000104 958a     +DEC R24
000105 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000106 9621      	ADIW R28,1
000107 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000108 931a      	ST   -Y,R17
000109 930a      	ST   -Y,R16
00010a 2f1a      	MOV  R17,R26
00010b 810a      	LDD  R16,Y+2
00010c 2fe1      	MOV  R30,R17
00010d e0f0      	LDI  R31,0
00010e 5ae0      	SUBI R30,LOW(-__base_y_G100)
00010f 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000110 81e0      	LD   R30,Z
000111 0fe0      	ADD  R30,R16
000112 2fae      	MOV  R26,R30
000113 dfe7      	RCALL __lcd_write_data
000114 2e50      	MOV  R5,R16
000115 2e41      	MOV  R4,R17
000116 8119      	LDD  R17,Y+1
000117 8108      	LDD  R16,Y+0
000118 9623      	ADIW R28,3
000119 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011a e0a2      	LDI  R26,LOW(2)
00011b d1bd      	RCALL SUBOPT_0x0
00011c e0ac      	LDI  R26,LOW(12)
00011d dfdd      	RCALL __lcd_write_data
00011e e0a1      	LDI  R26,LOW(1)
00011f d1b9      	RCALL SUBOPT_0x0
000120 e0e0      	LDI  R30,LOW(0)
000121 2e4e      	MOV  R4,R30
000122 2e5e      	MOV  R5,R30
000123 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000124 931a      	ST   -Y,R17
000125 2f1a      	MOV  R17,R26
000126 301a      	CPI  R17,10
000127 f011      	BREQ _0x2000011
000128 1457      	CP   R5,R7
000129 f038      	BRLO _0x2000010
                 _0x2000011:
00012a e0e0      	LDI  R30,LOW(0)
00012b 93ea      	ST   -Y,R30
00012c 9443      	INC  R4
00012d 2da4      	MOV  R26,R4
00012e dfd9      	RCALL _lcd_gotoxy
00012f 301a      	CPI  R17,10
000130 f181      	BREQ _0x2080001
                 _0x2000010:
000131 9453      	INC  R5
000132 9ad8      	SBI  0x1B,0
000133 2fa1      	MOV  R26,R17
000134 dfc6      	RCALL __lcd_write_data
000135 98d8      	CBI  0x1B,0
000136 c02a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000137 931a      	ST   -Y,R17
000138 2f1a      	MOV  R17,R26
000139 9ad3      	SBI  0x1A,3
00013a 9ad4      	SBI  0x1A,4
00013b 9ad5      	SBI  0x1A,5
00013c 9ad6      	SBI  0x1A,6
00013d 9ad2      	SBI  0x1A,2
00013e 9ad0      	SBI  0x1A,0
00013f 9ad1      	SBI  0x1A,1
000140 98da      	CBI  0x1B,2
000141 98d8      	CBI  0x1B,0
000142 98d9      	CBI  0x1B,1
000143 2e71      	MOV  R7,R17
000144 2fe1      	MOV  R30,R17
000145 58e0      	SUBI R30,-LOW(128)
                +
000146 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000148 2fe1      	MOV  R30,R17
000149 54e0      	SUBI R30,-LOW(192)
                +
00014a 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00014c e1a4      	LDI  R26,LOW(20)
00014d e0b0      	LDI  R27,0
00014e d1cd      	RCALL _delay_ms
00014f d18d      	RCALL SUBOPT_0x1
000150 d18c      	RCALL SUBOPT_0x1
000151 d18b      	RCALL SUBOPT_0x1
000152 e2a0      	LDI  R26,LOW(32)
000153 df85      	RCALL __lcd_write_nibble_G100
                +
000154 ec88     +LDI R24 , LOW ( 200 )
000155 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000156 9701     +SBIW R24 , 1
000157 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000158 e2a8      	LDI  R26,LOW(40)
000159 dfa1      	RCALL __lcd_write_data
00015a e0a4      	LDI  R26,LOW(4)
00015b df9f      	RCALL __lcd_write_data
00015c e8a5      	LDI  R26,LOW(133)
00015d df9d      	RCALL __lcd_write_data
00015e e0a6      	LDI  R26,LOW(6)
00015f df9b      	RCALL __lcd_write_data
000160 dfb9      	RCALL _lcd_clear
                 _0x2080001:
000161 9119      	LD   R17,Y+
000162 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 9726      	SBIW R28,6
000166 d19a      	RCALL __SAVELOCR6
000167 e010      	LDI  R17,0
000168 85ac      	LDD  R26,Y+12
000169 85bd      	LDD  R27,Y+12+1
00016a e0e0      	LDI  R30,LOW(0)
00016b e0f0      	LDI  R31,HIGH(0)
00016c 93ed      	ST   X+,R30
00016d 93fc      	ST   X,R31
                 _0x2020016:
00016e 89ea      	LDD  R30,Y+18
00016f 89fb      	LDD  R31,Y+18+1
000170 9631      	ADIW R30,1
000171 8bea      	STD  Y+18,R30
000172 8bfb      	STD  Y+18+1,R31
000173 9731      	SBIW R30,1
000174 91e4      	LPM  R30,Z
000175 2f2e      	MOV  R18,R30
000176 30e0      	CPI  R30,0
000177 f409      	BRNE PC+2
000178 c10b      	RJMP _0x2020018
000179 2fe1      	MOV  R30,R17
00017a 30e0      	CPI  R30,0
00017b f431      	BRNE _0x202001C
00017c 3225      	CPI  R18,37
00017d f411      	BRNE _0x202001D
00017e e011      	LDI  R17,LOW(1)
00017f c001      	RJMP _0x202001E
                 _0x202001D:
000180 d163      	RCALL SUBOPT_0x2
                 _0x202001E:
000181 c101      	RJMP _0x202001B
                 _0x202001C:
000182 30e1      	CPI  R30,LOW(0x1)
000183 f4a1      	BRNE _0x202001F
000184 3225      	CPI  R18,37
000185 f411      	BRNE _0x2020020
000186 d15d      	RCALL SUBOPT_0x2
000187 c0fa      	RJMP _0x20200CC
                 _0x2020020:
000188 e012      	LDI  R17,LOW(2)
000189 e040      	LDI  R20,LOW(0)
00018a e000      	LDI  R16,LOW(0)
00018b 322d      	CPI  R18,45
00018c f411      	BRNE _0x2020021
00018d e001      	LDI  R16,LOW(1)
00018e c0f4      	RJMP _0x202001B
                 _0x2020021:
00018f 322b      	CPI  R18,43
000190 f411      	BRNE _0x2020022
000191 e24b      	LDI  R20,LOW(43)
000192 c0f0      	RJMP _0x202001B
                 _0x2020022:
000193 3220      	CPI  R18,32
000194 f411      	BRNE _0x2020023
000195 e240      	LDI  R20,LOW(32)
000196 c0ec      	RJMP _0x202001B
                 _0x2020023:
000197 c002      	RJMP _0x2020024
                 _0x202001F:
000198 30e2      	CPI  R30,LOW(0x2)
000199 f439      	BRNE _0x2020025
                 _0x2020024:
00019a e050      	LDI  R21,LOW(0)
00019b e013      	LDI  R17,LOW(3)
00019c 3320      	CPI  R18,48
00019d f411      	BRNE _0x2020026
00019e 6800      	ORI  R16,LOW(128)
00019f c0e3      	RJMP _0x202001B
                 _0x2020026:
0001a0 c003      	RJMP _0x2020027
                 _0x2020025:
0001a1 30e3      	CPI  R30,LOW(0x3)
0001a2 f009      	BREQ PC+2
0001a3 c0df      	RJMP _0x202001B
                 _0x2020027:
0001a4 3320      	CPI  R18,48
0001a5 f010      	BRLO _0x202002A
0001a6 332a      	CPI  R18,58
0001a7 f008      	BRLO _0x202002B
                 _0x202002A:
0001a8 c007      	RJMP _0x2020029
                 _0x202002B:
0001a9 e0aa      	LDI  R26,LOW(10)
0001aa 9f5a      	MUL  R21,R26
0001ab 2d50      	MOV  R21,R0
0001ac 2fe2      	MOV  R30,R18
0001ad 53e0      	SUBI R30,LOW(48)
0001ae 0f5e      	ADD  R21,R30
0001af c0d3      	RJMP _0x202001B
                 _0x2020029:
0001b0 2fe2      	MOV  R30,R18
0001b1 36e3      	CPI  R30,LOW(0x63)
0001b2 f439      	BRNE _0x202002F
0001b3 d137      	RCALL SUBOPT_0x3
0001b4 89e8      	LDD  R30,Y+16
0001b5 89f9      	LDD  R31,Y+16+1
0001b6 81a4      	LDD  R26,Z+4
0001b7 93aa      	ST   -Y,R26
0001b8 d138      	RCALL SUBOPT_0x4
0001b9 c0c8      	RJMP _0x2020030
                 _0x202002F:
0001ba 37e3      	CPI  R30,LOW(0x73)
0001bb f429      	BRNE _0x2020032
0001bc d12e      	RCALL SUBOPT_0x3
0001bd d139      	RCALL SUBOPT_0x5
0001be d101      	RCALL _strlen
0001bf 2f1e      	MOV  R17,R30
0001c0 c007      	RJMP _0x2020033
                 _0x2020032:
0001c1 37e0      	CPI  R30,LOW(0x70)
0001c2 f449      	BRNE _0x2020035
0001c3 d127      	RCALL SUBOPT_0x3
0001c4 d132      	RCALL SUBOPT_0x5
0001c5 d106      	RCALL _strlenf
0001c6 2f1e      	MOV  R17,R30
0001c7 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0001c8 6002      	ORI  R16,LOW(2)
0001c9 770f      	ANDI R16,LOW(127)
0001ca e030      	LDI  R19,LOW(0)
0001cb c03a      	RJMP _0x2020036
                 _0x2020035:
0001cc 36e4      	CPI  R30,LOW(0x64)
0001cd f011      	BREQ _0x2020039
0001ce 36e9      	CPI  R30,LOW(0x69)
0001cf f411      	BRNE _0x202003A
                 _0x2020039:
0001d0 6004      	ORI  R16,LOW(4)
0001d1 c002      	RJMP _0x202003B
                 _0x202003A:
0001d2 37e5      	CPI  R30,LOW(0x75)
0001d3 f431      	BRNE _0x202003C
                 _0x202003B:
0001d4 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0001d5 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0001d6 83ee      	STD  Y+6,R30
0001d7 83ff      	STD  Y+6+1,R31
0001d8 e015      	LDI  R17,LOW(5)
0001d9 c00c      	RJMP _0x202003D
                 _0x202003C:
0001da 35e8      	CPI  R30,LOW(0x58)
0001db f411      	BRNE _0x202003F
0001dc 6008      	ORI  R16,LOW(8)
0001dd c003      	RJMP _0x2020040
                 _0x202003F:
0001de 37e8      	CPI  R30,LOW(0x78)
0001df f009      	BREQ PC+2
0001e0 c0a1      	RJMP _0x2020071
                 _0x2020040:
0001e1 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0001e2 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0001e3 83ee      	STD  Y+6,R30
0001e4 83ff      	STD  Y+6+1,R31
0001e5 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0001e6 ff02      	SBRS R16,2
0001e7 c015      	RJMP _0x2020042
0001e8 d102      	RCALL SUBOPT_0x3
0001e9 89a8      	LDD  R26,Y+16
0001ea 89b9      	LDD  R27,Y+16+1
0001eb 9614      	ADIW R26,4
0001ec 91ed      	LD   R30,X+
0001ed 91fd      	LD   R31,X+
0001ee 87ea      	STD  Y+10,R30
0001ef 87fb      	STD  Y+10+1,R31
0001f0 85ab      	LDD  R26,Y+11
0001f1 23aa      	TST  R26
0001f2 f422      	BRPL _0x2020043
0001f3 d11b      	RCALL __ANEGW1
0001f4 87ea      	STD  Y+10,R30
0001f5 87fb      	STD  Y+10+1,R31
0001f6 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0001f7 3040      	CPI  R20,0
0001f8 f011      	BREQ _0x2020044
0001f9 5f1f      	SUBI R17,-LOW(1)
0001fa c001      	RJMP _0x2020045
                 _0x2020044:
0001fb 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0001fc c009      	RJMP _0x2020046
                 _0x2020042:
0001fd d0ed      	RCALL SUBOPT_0x3
0001fe 89a8      	LDD  R26,Y+16
0001ff 89b9      	LDD  R27,Y+16+1
000200 9614      	ADIW R26,4
                +
000201 91ed     +LD R30 , X +
000202 91fc     +LD R31 , X
000203 9711     +SBIW R26 , 1
                 	__GETW1P
000204 87ea      	STD  Y+10,R30
000205 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
000206 fd00      	SBRC R16,0
000207 c010      	RJMP _0x2020047
                 _0x2020048:
000208 1715      	CP   R17,R21
000209 f470      	BRSH _0x202004A
00020a ff07      	SBRS R16,7
00020b c008      	RJMP _0x202004B
00020c ff02      	SBRS R16,2
00020d c004      	RJMP _0x202004C
00020e 7f0b      	ANDI R16,LOW(251)
00020f 2f24      	MOV  R18,R20
000210 5011      	SUBI R17,LOW(1)
000211 c001      	RJMP _0x202004D
                 _0x202004C:
000212 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000213 c001      	RJMP _0x202004E
                 _0x202004B:
000214 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000215 d0ce      	RCALL SUBOPT_0x2
000216 5051      	SUBI R21,LOW(1)
000217 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000218 2f31      	MOV  R19,R17
000219 ff01      	SBRS R16,1
00021a c016      	RJMP _0x202004F
                 _0x2020050:
00021b 3030      	CPI  R19,0
00021c f099      	BREQ _0x2020052
00021d ff03      	SBRS R16,3
00021e c006      	RJMP _0x2020053
00021f 81ee      	LDD  R30,Y+6
000220 81ff      	LDD  R31,Y+6+1
000221 9125      	LPM  R18,Z+
000222 83ee      	STD  Y+6,R30
000223 83ff      	STD  Y+6+1,R31
000224 c005      	RJMP _0x2020054
                 _0x2020053:
000225 81ae      	LDD  R26,Y+6
000226 81bf      	LDD  R27,Y+6+1
000227 912d      	LD   R18,X+
000228 83ae      	STD  Y+6,R26
000229 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00022a d0b9      	RCALL SUBOPT_0x2
00022b 3050      	CPI  R21,0
00022c f009      	BREQ _0x2020055
00022d 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00022e 5031      	SUBI R19,LOW(1)
00022f cfeb      	RJMP _0x2020050
                 _0x2020052:
000230 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000231 e320      	LDI  R18,LOW(48)
000232 81ee      	LDD  R30,Y+6
000233 81ff      	LDD  R31,Y+6+1
000234 d0de      	RCALL __GETW1PF
000235 87e8      	STD  Y+8,R30
000236 87f9      	STD  Y+8+1,R31
000237 81ee      	LDD  R30,Y+6
000238 81ff      	LDD  R31,Y+6+1
000239 9632      	ADIW R30,2
00023a 83ee      	STD  Y+6,R30
00023b 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00023c 85e8      	LDD  R30,Y+8
00023d 85f9      	LDD  R31,Y+8+1
00023e 85aa      	LDD  R26,Y+10
00023f 85bb      	LDD  R27,Y+10+1
000240 17ae      	CP   R26,R30
000241 07bf      	CPC  R27,R31
000242 f050      	BRLO _0x202005C
000243 5f2f      	SUBI R18,-LOW(1)
000244 85a8      	LDD  R26,Y+8
000245 85b9      	LDD  R27,Y+8+1
000246 85ea      	LDD  R30,Y+10
000247 85fb      	LDD  R31,Y+10+1
000248 1bea      	SUB  R30,R26
000249 0bfb      	SBC  R31,R27
00024a 87ea      	STD  Y+10,R30
00024b 87fb      	STD  Y+10+1,R31
00024c cfef      	RJMP _0x202005A
                 _0x202005C:
00024d 332a      	CPI  R18,58
00024e f028      	BRLO _0x202005D
00024f ff03      	SBRS R16,3
000250 c002      	RJMP _0x202005E
000251 5f29      	SUBI R18,-LOW(7)
000252 c001      	RJMP _0x202005F
                 _0x202005E:
000253 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000254 fd04      	SBRC R16,4
000255 c019      	RJMP _0x2020061
000256 3321      	CPI  R18,49
000257 f420      	BRSH _0x2020063
000258 85a8      	LDD  R26,Y+8
000259 85b9      	LDD  R27,Y+8+1
00025a 9711      	SBIW R26,1
00025b f409      	BRNE _0x2020062
                 _0x2020063:
00025c c009      	RJMP _0x20200CD
                 _0x2020062:
00025d 1753      	CP   R21,R19
00025e f010      	BRLO _0x2020067
00025f ff00      	SBRS R16,0
000260 c001      	RJMP _0x2020068
                 _0x2020067:
000261 c011      	RJMP _0x2020066
                 _0x2020068:
000262 e220      	LDI  R18,LOW(32)
000263 ff07      	SBRS R16,7
000264 c00a      	RJMP _0x2020069
000265 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000266 6100      	ORI  R16,LOW(16)
000267 ff02      	SBRS R16,2
000268 c006      	RJMP _0x202006A
000269 7f0b      	ANDI R16,LOW(251)
00026a 934a      	ST   -Y,R20
00026b d085      	RCALL SUBOPT_0x4
00026c 3050      	CPI  R21,0
00026d f009      	BREQ _0x202006B
00026e 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00026f d074      	RCALL SUBOPT_0x2
000270 3050      	CPI  R21,0
000271 f009      	BREQ _0x202006C
000272 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000273 5031      	SUBI R19,LOW(1)
000274 85a8      	LDD  R26,Y+8
000275 85b9      	LDD  R27,Y+8+1
000276 9712      	SBIW R26,2
000277 f008      	BRLO _0x2020059
000278 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000279 ff00      	SBRS R16,0
00027a c007      	RJMP _0x202006D
                 _0x202006E:
00027b 3050      	CPI  R21,0
00027c f029      	BREQ _0x2020070
00027d 5051      	SUBI R21,LOW(1)
00027e e2e0      	LDI  R30,LOW(32)
00027f 93ea      	ST   -Y,R30
000280 d070      	RCALL SUBOPT_0x4
000281 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000282 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000283 ceea      	RJMP _0x2020016
                 _0x2020018:
000284 85ac      	LDD  R26,Y+12
000285 85bd      	LDD  R27,Y+12+1
000286 91ed      	LD   R30,X+
000287 91fd      	LD   R31,X+
000288 d07f      	RCALL __LOADLOCR6
000289 9664      	ADIW R28,20
00028a 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
00028b d077      	RCALL __SAVELOCR4
00028c 018d      	MOVW R16,R26
00028d 813c      	LDD  R19,Y+4
00028e 2fa3      	MOV  R26,R19
00028f de94      	RCALL _lcd_putchar
000290 01d8      	MOVW R26,R16
000291 91ed      	LD   R30,X+
000292 91fd      	LD   R31,X+
000293 9631      	ADIW R30,1
000294 93fe      	ST   -X,R31
000295 93ee      	ST   -X,R30
000296 d073      	RCALL __LOADLOCR4
000297 9625      	ADIW R28,5
000298 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
000299 92ff      	PUSH R15
00029a 2ef8      	MOV  R15,R24
00029b 9726      	SBIW R28,6
00029c 931a      	ST   -Y,R17
00029d 930a      	ST   -Y,R16
00029e 01de      	MOVW R26,R28
00029f 9614      	ADIW R26,4
                +
0002a0 2400     +CLR R0
0002a1 0daf     +ADD R26 , R15
0002a2 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002a3 018d      	MOVW R16,R26
0002a4 e0e0      	LDI  R30,LOW(0)
0002a5 83ec      	STD  Y+4,R30
0002a6 83ed      	STD  Y+4+1,R30
0002a7 83ee      	STD  Y+6,R30
0002a8 83ef      	STD  Y+6+1,R30
0002a9 01de      	MOVW R26,R28
0002aa 9618      	ADIW R26,8
                +
0002ab 2400     +CLR R0
0002ac 0daf     +ADD R26 , R15
0002ad 1db0     +ADC R27 , R0
                 	__ADDW2R15
0002ae 91ed      	LD   R30,X+
0002af 91fd      	LD   R31,X+
0002b0 93fa      	ST   -Y,R31
0002b1 93ea      	ST   -Y,R30
0002b2 931a      	ST   -Y,R17
0002b3 930a      	ST   -Y,R16
0002b4 e8eb      	LDI  R30,LOW(_put_lcd_G101)
0002b5 e0f2      	LDI  R31,HIGH(_put_lcd_G101)
0002b6 93fa      	ST   -Y,R31
0002b7 93ea      	ST   -Y,R30
0002b8 01de      	MOVW R26,R28
0002b9 9618      	ADIW R26,8
0002ba dea8      	RCALL __print_G101
0002bb 8119      	LDD  R17,Y+1
0002bc 8108      	LDD  R16,Y+0
0002bd 9628      	ADIW R28,8
0002be 90ff      	POP  R15
0002bf 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002c0 93ba      	ST   -Y,R27
0002c1 93aa      	ST   -Y,R26
0002c2 91a9          ld   r26,y+
0002c3 91b9          ld   r27,y+
0002c4 27ee          clr  r30
0002c5 27ff          clr  r31
                 strlen0:
0002c6 916d          ld   r22,x+
0002c7 2366          tst  r22
0002c8 f011          breq strlen1
0002c9 9631          adiw r30,1
0002ca cffb          rjmp strlen0
                 strlen1:
0002cb 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002cc 93ba      	ST   -Y,R27
0002cd 93aa      	ST   -Y,R26
0002ce 27aa          clr  r26
0002cf 27bb          clr  r27
0002d0 91e9          ld   r30,y+
0002d1 91f9          ld   r31,y+
                 strlenf0:
0002d2 9005      	lpm  r0,z+
0002d3 2000          tst  r0
0002d4 f011          breq strlenf1
0002d5 9611          adiw r26,1
0002d6 cffb          rjmp strlenf0
                 strlenf1:
0002d7 01fd          movw r30,r26
0002d8 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002d9 de21      	RCALL __lcd_write_data
0002da e0a3      	LDI  R26,LOW(3)
0002db e0b0      	LDI  R27,0
0002dc c03f      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0002dd e3a0      	LDI  R26,LOW(48)
0002de ddfa      	RCALL __lcd_write_nibble_G100
                +
0002df ec88     +LDI R24 , LOW ( 200 )
0002e0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e1 9701     +SBIW R24 , 1
0002e2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
0002e4 932a      	ST   -Y,R18
0002e5 85ad      	LDD  R26,Y+13
0002e6 85be      	LDD  R27,Y+13+1
0002e7 85ef      	LDD  R30,Y+15
0002e8 89f8      	LDD  R31,Y+15+1
0002e9 9509      	ICALL
0002ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x3:
0002eb 89e8      	LDD  R30,Y+16
0002ec 89f9      	LDD  R31,Y+16+1
0002ed 9734      	SBIW R30,4
0002ee 8be8      	STD  Y+16,R30
0002ef 8bf9      	STD  Y+16+1,R31
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0002f1 85ad      	LDD  R26,Y+13
0002f2 85be      	LDD  R27,Y+13+1
0002f3 85ef      	LDD  R30,Y+15
0002f4 89f8      	LDD  R31,Y+15+1
0002f5 9509      	ICALL
0002f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0002f7 89a8      	LDD  R26,Y+16
0002f8 89b9      	LDD  R27,Y+16+1
0002f9 9614      	ADIW R26,4
0002fa 91ed      	LD   R30,X+
0002fb 91fd      	LD   R31,X+
0002fc 83ee      	STD  Y+6,R30
0002fd 83ff      	STD  Y+6+1,R31
0002fe 81ae      	LDD  R26,Y+6
0002ff 81bf      	LDD  R27,Y+6+1
000300 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000301 935a      	ST   -Y,R21
                 __SAVELOCR5:
000302 934a      	ST   -Y,R20
                 __SAVELOCR4:
000303 933a      	ST   -Y,R19
                 __SAVELOCR3:
000304 932a      	ST   -Y,R18
                 __SAVELOCR2:
000305 931a      	ST   -Y,R17
000306 930a      	ST   -Y,R16
000307 9508      	RET
                 
                 __LOADLOCR6:
000308 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000309 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00030a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00030b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00030c 8119      	LDD  R17,Y+1
00030d 8108      	LD   R16,Y
00030e 9508      	RET
                 
                 __ANEGW1:
00030f 95f1      	NEG  R31
000310 95e1      	NEG  R30
000311 40f0      	SBCI R31,0
000312 9508      	RET
                 
                 __GETW1PF:
000313 9005      	LPM  R0,Z+
000314 91f4      	LPM  R31,Z
000315 2de0      	MOV  R30,R0
000316 9508      	RET
                 
                 __PUTPARD1:
000317 937a      	ST   -Y,R23
000318 936a      	ST   -Y,R22
000319 93fa      	ST   -Y,R31
00031a 93ea      	ST   -Y,R30
00031b 9508      	RET
                 
                 _delay_ms:
00031c 9610      	adiw r26,0
00031d f039      	breq __delay_ms1
                 __delay_ms0:
00031e 95a8      	wdr
                +
00031f ed80     +LDI R24 , LOW ( 0x7D0 )
000320 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000321 9701     +SBIW R24 , 1
000322 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000323 9711      	sbiw r26,1
000324 f7c9      	brne __delay_ms0
                 __delay_ms1:
000325 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  41 r17:  45 r18:  27 r19:  12 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  23 r25:   5 r26:  74 r27:  27 r28:  12 r29:   1 r30: 145 r31:  54 
x  :  21 y  : 135 z  :  14 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  18 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  39 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  41 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  22 ld    :  24 ldd   :  59 ldi   :  91 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  29 movw  :  10 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :   8 pop   :   1 push  :   1 rcall :  50 ret   :  30 
reti  :   0 rjmp  :  81 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  19 sbic  :   0 sbis  :  10 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  30 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00064c   1580     32   1612   16384   9.8%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
